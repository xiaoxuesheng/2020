package com.hjj.toy.util.java8.lamda;

public class LambdaDemo {



    //lambda表达式格式 （参数） -> {表达式,可以用return得到返回值}
    // 如果参数类型可以推到(一般通过泛型体现) 则可以省略参数类型
    //如果只有一个参数并且类型可以推导，则用
    //如果没有参数，则()->{表达式}
    //永远不需要为一个lambda表达式执行返回类型，它总是会从上下文中被推导出来

    //在lambda表达式中,只在某些分支中返回值（其他分支没有返回值）是不合法的
    //

    //函数式接口：只含有一个抽象方法的接口
    //lambda表达式会生成接口实例

    //方法引用  对象::实例方法  类::静态方法 此两种等同于提供方法参数的lambda表达式 类::实例方法 第一个参数为执行方法的对象
    //构造器引用 类似于方法引用 不同的是方法名为new


    //接口的默认方法-接口内提供方法的实现
    //注意:类中重写的(默认)方法会覆盖接口定义的默认方法;实现多个接口时，如果默认方法的名称和参数类型相同,则实现类需要覆盖默认方法以解决冲突




    public static void main(String[] args){

    }
}
