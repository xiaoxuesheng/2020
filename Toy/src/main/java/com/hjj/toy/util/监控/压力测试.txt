JMeter
Jmeter 是java 应用，对于CPU和内存的消耗比较大，因此，当需要模拟数以千计的并发用户时，使用单台机器模拟所有的并发用户就有些力不从心，甚至会引起JAVA内存溢出错误。为了让jmeter工具提供更大的负载能力，jmeter短小精悍一有了使用多台机器同时产生负载的机制。
那么，是如何实现多台负载机同时运行的呢？当然不会多个人坐在多台负载机面前，一喊开始，大家同时启动jmeter。这种方式很笨，也很难达到真正的同步。其实，我们通过单个jmeter 客户端就可以控制多个远程的jmeter服务器，使它们同步的对服务器进行压力测试。

通过远程运行jmeter，测试人员可以跨越多台低端计算机复制测试，这样就可以模拟一个比较大的服务器压力，一个jmeter客户端实例，理论上可以控制任意多的远程jmeter实例，并通过他们收集测试数据。这样一样，就有了如下特性：
*   保存测试采样数据到本地机器
*   通过单台机器管理多个jmeter执行引擎。
*   没有必要将测试计划复制到每一台机器，jmeter GUI客户端会将它发往每一台jmeter服务器。
*   每一台jmeter远程服务器都执行相同的测试计划，jmeter不会在执行期间做负载均衡，每一台服务器都会完整地运行测试计划。

在1.4G Hz～3GHz 的CPU 、1GB 内存的 JMeter 客户端上，可以处理线程 100～300。但是Web Service 例外。XML处理是 CPU 运算密集的，会迅速消耗掉所有的CPU 。一般来说，以XML技术为核心的应用系统，其性能将是普通Web 应用的 10%～25% 。另外，如果所有负载由一台机器产生，网卡和交换机端口都可能产生瓶颈，所以一个JMeter 客户端线程数不应超过 10 0 。

采用JMeter 远程模式并不会比独立运行相同数目的非GUI 测试更耗费资源。但是，如果使用大量的JMeter 远程服务器，可能会导致客户端过载，或者网络连接发生拥塞。

使用多台机器产生负载的操作步骤如下：

（1）在所有期望运行jmeter作为 负载生成器的机器上安装jmeter， 并确定其中一台机器作为 controller ，其他的的机器作为agent 。

（2） 运行所有 agent 机器上的jmeter-server 文件（假定使用两台机器192.168.0.100 和192.168.0.101 作为agent）

（3）在controller机器的jmeter的bin目录下，找到jmeter.properties 文件，编辑该文件：

查找：
remote_hosts=127.0.0.1
修改为：
remote_hosts=192.168.0.100:1099,192.168.0.101:1099

这里要特别注意端口后，有些资料说明端口1644为jmeter的controller 和agent 之间进行通信的默认RMI端口号，但是在测试时发现，设置为1644运行不成功，改成1099后运行通过。另外还要留意agent的机子是否开启了防火墙等。



（4）启动controller 机子上的jmeter应用jmeter.bat，选择菜单“运行”--->“远程启动”，来分别启动agent ，也可以直接选择“远程全部启动”来将所有的agent启动。

遇到的常见问题：

1.在Controller端上控制某台机器Run，提示"Bad call to remote host"。

解决方法：检查被控制机器上的jmeter-server有没有启动，或者JMeter.properties中remote_hosts的配置错误。

2.Agent机器启动Jmete-server.bat时，后台提示："could not find ApacheJmeter_core.jar"
解决方法：确定在Agent机器安装jdk，并设置环境变量

3.linux中启动Jmeter-server，关闭shell连接后服务停止
解决方法：nohup sh jmeter-server &

4.若碰到启动jmeter-server时提示端口被占用，建议修改端口号，包括当前机器的配置文件的默认端口号和Controller端的配置文件相关机器的端口号

5.如果使用时agent机器提示connection refused，需要去agent机器启动jmeter-server

6.压测时有用到文件做测试数据时需要把文件数据放到每台测试机上面，并且保证各机器上文件路径一致

7.上文中提到每个机器jmeter线程数不能超过100，在实际过程中180还是可以的，尽量不要超过200.