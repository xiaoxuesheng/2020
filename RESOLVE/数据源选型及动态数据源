一、解决的业务问题
不同的系统对数据源的动态选择；
数据源切换属于低频场景；
系统支持多数据源-读写分离；
系统支持垂直业务扩展-连接多库；
系统以oltp为主；

spring RoutingDataSource
https://www.cnblogs.com/tqlin/p/11430702.html

mongo
https://blog.csdn.net/rumenxiaobaidog/article/details/103500351
https://www.jianshu.com/p/f4d45568c74b
https://blog.csdn.net/u011663149/article/details/88634598
https://segmentfault.com/a/1190000019701492?utm_source=tag-newest

redis
https://www.jianshu.com/p/e00e09802d21
https://blog.csdn.net/sz85850597/article/details/82227490
https://blog.csdn.net/agg7911/article/details/101137053
https://blog.csdn.net/Abysscarry/article/details/87487891

hbase
https://blog.csdn.net/User_xiangpeng/article/details/102869605
https://blog.csdn.net/u012129558/article/details/100120334
https://www.cnblogs.com/leon0/p/11381353.html

支持的数据库种类：
关系型数据库：
mysql：driverClassName url username password
sqlserver ：driverClassName url username password
oracle ：driverClassName url username password
postgresql：driverClassName url username password
非关系数据库：
mongodb:
spring.data.mongodb.database=mymongodb
spring.data.mongodb.host=127.0.0.1
spring.data.mongodb.port=27017
spring.data.mongodb.repositories.enabled=true
spring.data.mongodb.username=连接用户名
spring.data.mongodb.password=连接密码
或
spring.data.mongodb.uri=mongodb://name:pass@localhost:27017/test
uri方式支持集群配置
采用mongotemplate

redis：
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=localhost
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=0
定义RedisConnectionFactory RedisTemplate

hbase
依赖hadoop，HDFS之上的bigtable实现，高性能、面向列、可伸缩的；每个值是一个未经解释的字符串，没有数据类型；不支持事务
简单的插入、查询、删除、清空，不存在复杂的表与表之间的关系；
在HBase中执行更新操作时，并不会删除数据旧的版本，而是生成一个新的版本，旧有的版本仍然保留，时间戳索引。
hbase.zookeeper.quorum=hadoop-02,hadoop-03,hadoop-04
hbase.zookeeper.property.clientPort=2181
hbase.rootdir=/hbase
实现实时查询操作
数据新增时按照行，列族，列为维度插入数据
数据访问时按照行key访问整行
HBase是根据Rowkey来进行检索的，系统通过找到某个Rowkey (或者某个 Rowkey 范围)所在的Region，然后将查询数据的请求路由到该Region获取数据。
HBase的检索支持3种方式：
（1） 通过单个Rowkey访问，即按照某个Rowkey键值进行get操作，这样获取唯一一条记录；
（2） 通过Rowkey的range进行scan，即通过设置startRowKey和endRowKey，在这个范围内进行扫描。这样可以按指定的条件获取一批记录；
（3） 全表扫描，即直接扫描整张表中所有行记录。
rowkey设计是关键，通过rowkey实现快速条件查询
可使用filter实现多条件过滤
1.数值比较器要确定hbase每个字段的存储类型。
2.使用startRow和endRow是务必要注意是否需要RowFilter进行过滤
3.经常变化的字段不要放入rowKey避免造成数据量持续过快增长
4.自定义比较器的添加需要重启hbase才会生效

数据库：目的为存储
数据仓库：目的为分析

数据场景
https://www.cnblogs.com/garfieldcgf/p/8144440.html

hive
https://blog.csdn.net/liberty12345678/article/details/86237251
Hive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射成为一张数据库表，并提供类SQL的查询功能。可以将sql语句转化为MapReduce任务进行运行。Hive提供了一系列的工具，可以用来进行数据提取转化加载（ETL），这是一种可以存储、查询和分析存储在 Hadoop 中的大规模数据的机制。
Hive 的本质其实就相当于将 HDFS 中已经存储的文件在 Mysql 中做了一个双射关系，以方 便使用 HQL 去管理查询。
Hive 适用于离线的数据分析和清洗，延迟较高。ETL

sqoop
https://www.jianshu.com/p/ec9003d8918c
从关系型到hadoop hadoop到关系型数据库 用于数据迁移

二、可变化动态数据源支持类型分类
1）同类型结构化固定数据源时：固定驱动等基础配置，只需修改连接信息
2）不同类型结构化固定数据源时：固定持久层框架，需修改配置信息，需增加应用端路由层的路由信息，需开发适用类型的数据访问层
3）结构化非固定数量数据源时：固定持久层框架，需开发应用端路由层，需动态获取数据源配置信息，需进行数据源选择，需开发适用类型的数据访问层
4）可支持非结构化数据源（天然集群）时：不可用sql语句，需根据不同的类型开发CRUD功能

三、需实现核心功能：
1.系统对应数据源的统一管理服务
2.系统内获取数据源
3.根据业务条件切换数据源
4.针对不同类型的数据源进行相关CRUD操作
5.数据源配置更新时通知系统刷新


四、系统形态
方案1：目前数据处理方式，针对各类型业务对应不同的数据源迭代开发，各系统内服务层路由（数据源信息由各系统维护，并在系统内配置文件中读取）
核心功能：
1.配置文件配置数据源信息
2.缓存业务与服务层对应关系
3.针对不同业务不同类型数据源的服务层

方案2：数据源管理端，各系统内开发动态数据源获取\选择\具体SQL的CRUD功能（数据源信息统一维护，在系统内通过数据库或接口获取）
核心功能：
1.数据源管理端：数据源维护。更新通知
2.各系统：
1）获取数据源
2) 数据源初始化设置
3）缓存操作与数据源对应
4）持久层服务调用前的数据源切换
5）数据源信息获取更新并刷新

方案3：数据持久层平台化，1.平台内可配置系统（业务操作）对应数据源信息，2.平台内可适配各类型数据库的CRUD功能
1.数据源管理
2.适配常用类型数据库的CRUD操作
3.依系统操作切换数据源
4.提供各系统访问数据持久层接口

spring体系：
基于RoutingDataSource：支持SQL类型，不支持NOSQL
NOSQL需要单独开发，可重写相应Template，动态设置

SQL数据库中间件：
sharding-jdbc：数据库client端，需嵌入代码使用，功能强大，对于仅需要数据源切换来说属于重量级应用，对常用数据库的支持度需要调研
mycat：数据库proxy，需单独部署，对于仅需要数据源切换来说属于重量级应用，对常用数据库的支持度需要调研
